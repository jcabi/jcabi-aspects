 ------
 Encapsulate all exceptions into an allowed one.
 ------
 Krzysztof Krason
 ------
 2013-11-11
 ------

~~
~~ Copyright (c) 2012-2024, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com, nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES, LOSS OF USE, DATA, PROFITS, OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Unification of Exceptions Thrown from Java Methods

  Annotate your methods with
  {{{./apidocs-${project.version}/com/jcabi/aspects/UnitedThrows.html}<<<@UnitedThrows>>>}}
  annotation and every exception thrown out of the method
  will be an instance of the required type:

+--
public class Thrower {
  @UnitedThrow
  public void do() throws IOException {
    throw new FileNotFoundException();
  }
}
+--

  Instead of <<<FileNotFoundException>>>, an <<<IllegalStateException>>> will be thrown
  which is the default for <<<@UnitedThrow>>>.

  Here is another example, but with a custom selected exception:

+--
public class Thrower {
  @UnitedThrow(IOException.class)
  public void save() throws IOException, InterruptedException {
    throw new IllegalStateException();
  }
}
+--

  In this case, <<<IllegalStateException>>> will not be thrown.
  Instead, <<<IOException>>> will be used.

  The mechanism is implemented with AOP/AspectJ. Read
  {{{./example-weaving.html}to know how to integrate it into your <<<pom.xml>>>}}.
