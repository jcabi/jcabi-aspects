 ------
 Schedule With Fixed Delay without Executor or Thread Manipulations
 ------
 Yegor Bugayenko
 ------
 2013-03-26
 ------

~~
~~ Copyright (c) 2012-2024, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com, nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES, LOSS OF USE, DATA, PROFITS, OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Schedule With Fixed Delay without Executor or Thread Manipulations

  Make your class implement
  {{{http://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html}<<<Runnable>>>}}
  (or {{{http://docs.oracle.com/javase/7/docs/api/java/lang/concurrent/Callable.html}<<<Callable>>>}})
  and annotate it with
  {{{./apidocs-${project.version}/com/jcabi/aspects/ScheduleWithFixedDelay.html}<<<@ScheduleWithFixedDelay>>>}}
  annotation:

+--
@ScheduleWithFixedDelay(delay = 1, unit = TimeUnit.SECONDS)
public class Clock implements Runnable, Closeable {
  @Override
  public void run() {
    System.out.println("tick tick..");
  }
  @Override
  public void close() {
    System.out.println("done with ticking");
  }
}
+--

  Now, make an instance of this class and it will start ticking immediately:

+--
public class Main {
  public static void main(String[] args) {
    Clock clock = new Clock();
    TimeUnit.SECONDS.sleep(5); // Wait for five seconds.
    clock.close();
  }
}
+--

  If your class implements
  {{{http://docs.oracle.com/javase/7/docs/api/java/io/Closeable.html}<<<Closeable>>>}}
  ,you can stop a routine thread by calling its
  {{{http://docs.oracle.com/javase/7/docs/api/java/io/Closeable.html#close()}<<<close()>>>}}
  method.

  <<NOTE>>: You can only schedule one execution between all equal objects
  (i.e. instances that are equal according to
  {{{http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals%28java.lang.Object%29}<<<equals()>>>}}
  ). Invoking the same method multiple times and across equal objects, without
  stopping the scheduled execution beforehand, will result in an
  {{{http://docs.oracle.com/javase/7/docs/api/java/lang/IllegalStateException.html}<<<IllegalStateException>>>}}
  being thrown. This is in order to prevent bugs that result from "stray"
  executions that were scheduled by mistake.

  The mechanism is implemented with AOP/AspectJ. Read
  {{{./example-weaving.html}to know how to integrate it into your <<<pom.xml>>>}}.
