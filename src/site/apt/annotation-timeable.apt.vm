 ------
 Limit Java Method Execution Time
 ------
 Yegor Bugayenko
 ------
 2013-03-26
 ------

~~
~~ #set($hash="#")
~~ Copyright (c) 2012-2024, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com, nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES, LOSS OF USE, DATA, PROFITS, OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Limit Java Method Execution Time

  Annotate your methods with
  {{{./apidocs-${project.version}/com/jcabi/aspects/Timeable.html}<<<@Timeable>>>}}
  annotation and every time their execution takes more than the allowed time,
  their thread will be interrupted:

+--
public class Resource {
  @Timeable(limit = 5, unit = TimeUnit.SECONDS)
  public String load(URL url) {
    return url.openConnection().getContent();
  }
}
+--

  The thread running this method will be terminated if it takes more
  than five seconds.

  It is important to note that in Java 1.5+, it is impossible to force thread
  termination:
  {{{http://docs.oracle.com/javase/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html}Why Are Thread.stop, Thread.suspend, Thread.resume, and Runtime.runFinalizersOnExit Deprecated?}}
  We can't just call {{{http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html${hash}stop()}<<<Thread.stop()>>>}}
  when a thread is over a specified time limit. The best thing we can do is to call
  {{{http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html${hash}interrupt()}<<<Thread${hash}interrupt()>>>}}
  and hope that the thread itself is checking its
  {{{http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html${hash}isInterrupted()}<<<Thread${hash}isInterrupted()>>>}} status.
  If you want to design your long-running methods in a way that
  {{{./apidocs-${project.version}/com/jcabi/aspects/Timeable.html}<<<@Timeable>>>}}
  can terminate them, embed a checker into your most intessively used place. For example:

+--
public class Resource {
  @Timeable(limit = 1, unit = TimeUnit.SECONDS)
  public String load(String resource) {
    while (true) {
      if (Thread.currentThread().isInterrupted()) {
        throw new IllegalStateException("time out");
      }
      // Execution as usual.
    }
  }
}
+--

  The mechanism is implemented with AOP/AspectJ. Read
  {{{./example-weaving.html}to know how to integrate it into your <<<pom.xml>>>}}.

  {{{http://www.yegor256.com/2014/06/20/limit-method-execution-time.html}This blog post}} gives more details about the
  internal implementation of the mechanism.
