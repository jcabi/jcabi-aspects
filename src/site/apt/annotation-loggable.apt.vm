 ------
 Logging Java method executions
 ------
 Yegor Bugayenko
 ------
 2013-01-06
 ------

~~
~~ Copyright (c) 2012-2024, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com, nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES, LOSS OF USE, DATA, PROFITS, OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Logging Java method executions

  Read this blog post first:
  {{{http://www.yegor256.com/2014/06/01/aop-aspectj-java-method-logging.html}Java Method Logging with AOP and Annotations}}

  Annotate your methods with
  {{{./apidocs-${project.version}/com/jcabi/aspects/Loggable.html}<<<@Loggable>>>}}
  annotation and every time they are called, your SLF4J logging
  facility will receive a message with the details of execution and the total
  execution time:

+--
public class Resource {
  @Loggable(Loggable.DEBUG)
  public String load(URL url) {
    return url.openConnection().getContent();
  }
}
+--

  Something like this will appear in the log:

+--
[DEBUG] #load('http://www.google.com'): returned "<html ..." in 23ms
+--

  If a method throws an exception, it is also logged.

  Methods <<<toString()>>> of your method arguments and its return value are
  used to compose a log line. Too long of texts are trimmed to 100 characters
  in order to make log lines compact. Since version 0.7.13, it's possible
  to disable this trimming mechanism with an extra <<<trim>>> argument
  of the annotation.

  Note: Due to limitations of AspectJ, constructors are not supported at
  the moment.

  Since version 0.7.13, an entire class can be annotated. In this case, all
  public (!) methods will be logged (except <<<toString()>>>, <<<hashCode()>>>,
  and <<<equals(Object)>>>).

+--
public class Resource {
  @Loggable(Loggable.DEBUG)
  public class Foo {
    // All methods of the class will be logged.
  }
}
+--

  If both a class and a method are annotated, method annotation has a higher
  priority.

  Since version 0.7.6, you can specify a time limit in seconds as a maximum
  execution time of a method. If this limit is reached, a logging level is
  increased to WARN and method slowness is reported. Since version 0.7.14, you
  can change time unit as well:

+--
public class Resource {
  @Loggable(limit = 200, unit = TimeUnit.MILLISECONDS)
  public void run() {
    // Something that should not take more than 200 msec.
  }
}
+--

  Since version 0.7.16, you can get log lines not only when method
  execution is done, but also when it has just started:

+--
public class Resource {
  @Loggable(prepend = true)
  public void run() {
    // Something that takes too long.
  }
}
+--

  In this case, two log lines will be recorded. One when the method has
  just started and the other one when it returns the output.

  Since version 0.7.18, you can ignore certain exception types. They won't
  be logged when thrown and won't pollute the log. Sometimes, exceptions don't
  mean fatal errors and should not be visible in logs. For example, in
  JAX-RS, applications where
  {{{http://docs.oracle.com/javaee/6/api/javax/ws/rs/WebApplicationException.html}<<<WebApplicationException>>>}}
  is used to redirect a user
  to another page and not an indicator of an application error:

+--
@Path("/")
public class JaxRsResource {
  @GET
  @Loggable(ignore = WebApplicationException.class)
  public String get() {
    if (/* not a logged in user */) {
      throw new WebApplicationException(Response.seeOther(/* URI */));
    }
  }
}
+--

  Since version 0.7.19, it is possible to skip either arguments, or result
  part of the log message in order to make it more compact by using
  <<<skipArgs>>> and <<<skipResult>>> arguments of <<<@Loggable>>> annotation:

+--
public class VerboseClass {
  @Loggable(skipResult = true)
  public List<String> get(String name) {
    // Returns a long list of texts which are not
    // important and should not pollute the log.
  }
}
+--

  Since version 0.8.1, it is possible to add result of toString() method into
  the log line by setting <<<logThis>>> to true in <<<@Loggable>>> annotaton:

+--
public class LoggingThis {
  private final String name = "John";

  @Loggable(logThis = true)
  public List<String> get(String name) {
    // Returns a long list of texts which are not
    // important and should not pollute the log.
  }

  public String toString() {
    return String.format("{name=%s}", this.name);
  }
}
+--

  Since version 0.18, it is possible to use a custom target logger for
  logging in <<<@Loggable>>>, by setting <<<name>>> parameter to the desired
  logger. When this parameter is not set (or set to an empty string) target
  logger will be of the method class (this is the same behaviour as before 0.18
  release).

+--
public class LoggingName {
  @Loggable(name = "com.foo.my-custom-logger")
  public List<String> get(String name) {
      // will log to com.foo.my-custom-logger
+--

  Since version 0.18, it is possible to specify the precision of measured
  execution time by providing the number of fractional digits in <<<precision>>>
  parameter of <<<@Loggable>>>. The default precision is set to 2.

+--
public class LoggingPrecision {
  @Loggable(precision = 4)
  public List<String> get(String name) {
      // time logged will have 4 fractional digits
  }
}
+--

  The mechanism is implemented with AOP/AspectJ. Read
  {{{./example-weaving.html}how to integrate it into your <<<pom.xml>>>}}.
