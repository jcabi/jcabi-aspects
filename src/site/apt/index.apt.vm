 ------
 Useful Java AOP Aspects
 ------
 Yegor Bugayenko
 ------
 2012-05-27
 ------

~~
~~ Copyright (c) 2011, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Useful Java AOP Aspects

  This module contains a collection of useful AOP aspects, which
  allow you to modify the behavior of a Java application without
  writing a line of code. For example, you may want to retry HTTP
  resource downloading in case of failure. You can implement a full
  <<<do/while>>> cycle yourself, or you can annotate your method with
  {{{./apidocs-${project.version}/com/jcabi/aspects/RetryOnFailure.html}<<<@RetryOnFailure>>>}}
  and let one of our AOP aspects do the work for you:

+--
public class MyResource {
  @RetryOnFailure
  public String load(URL url) {
    return url.openConnection().getContent();
  }
}
+--

  <<<jcabi-aspects>>> works only together with {{{http://www.eclipse.org/aspectj/}AspectJ}},
  an {{{http://en.wikipedia.org/wiki/Aspect-oriented_programming}Aspect Oriented Programming (AOP)}}
  framework. At the moment we offer the following aspects
  (we extend this list every few months):

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Cacheable.html}<<<@Cacheable>>>}}:
     method results are cached for a few seconds to optimize performance,
     {{{./annotation-cacheable.html}read more}};

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Immutable.html}<<<@Immutable>>>}}:
     checks for class immutability in runtime,
     {{{./annotation-immutable.html}read more}};

   * {{{./apidocs-${project.version}/com/jcabi/aspects/LogExceptions.html}<<<@LogExceptions>>>}}:
     all exceptions thrown out of the method are automatically logged
     via {{{../jcabi-log/apidocs-${project.version}/com/jcabi/log/Logger.html}<<<Logger>>>}} to SLF4J,
     {{{./annotation-logexceptions.html}read more}};

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Quietly.html}<<<@Quietly>>>}}:
     all exceptions thrown out of the method are automatically logged and swallowed
     via {{{../jcabi-log/apidocs-${project.version}/com/jcabi/log/Logger.html}<<<Logger>>>}} to SLF4J,
     {{{./annotation-quietly.html}read more}};

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Loggable.html}<<<@Loggable>>>}}:
     every call to a method is automatically logged via
     {{{../jcabi-log/apidocs-${project.version}/com/jcabi/log/Logger.html}<<<Logger>>>}},
     {{{./annotation-loggable.html}read more}};

   * {{{./apidocs-${project.version}/com/jcabi/aspects/RetryOnFailure.html}<<<@RetryOnFailure>>>}}:
     method call is repeated a few times if exception is thrown,
     {{{./annotation-retryonfailure.html}read more}};

   * {{{./apidocs-${project.version}/com/jcabi/aspects/ScheduleWithFixedDelay.html}<<<@ScheduleWithFixedDelay>>>}}:
     turns a Runnable class into self-starting scheduled thread,
     {{{./annotation-schedulewithfixeddelay.html}read more}};

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Timeable.html}<<<@Timeable>>>}}:
     terminates a long-running method if it exceeds an allowed time frame,
     {{{./annotation-timeable.html}read more}};

  All you need to do to start using our AOP aspects is to
  add these two artifacts to your <<<pom.xml>>>:

+--
<dependency>
  <groupId>com.jcabi</groupId>
  <artifactId>jcabi-aspects</artifactId>
  <version>${project.version}</version>
</dependency>
<dependency>
  <groupId>org.aspectj</groupId>
  <artifactId>aspectjrt</artifactId>
  <version>1.6.12</version>
  <scope>runtime</scope>
</dependency>
+--

  Then, we recommend to use our own plugin for AspectJ weaving
  {{{../jcabi-maven-plugin/example-ajc.html}jcabi-maven-plugin:ajc}}:

+--
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>com.jcabi</groupId>
        <artifactId>jcabi-maven-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>ajc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
+--

  Actually, the best way to get all these configurations in one package
  is to use our
  {{{../parent/index.html}<<<com.jcabi:parent>>>}} parent <<<pom.xml>>>.

  However, you can use <<<aspectj-maven-plugin>>>,
  in order to apply AOP aspects to your code during compile time:

+--
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>aspectj-maven-plugin</artifactId>
  <version>1.4</version>
  <configuration>
    <complianceLevel>1.6</complianceLevel>
    <encoding>${project.build.sourceEncoding}</encoding>
    <showWeaveInfo>true</showWeaveInfo>
    <source>1.6</source>
    <target>1.6</target>
    <verbose>true</verbose>
    <aspectLibraries>
      <aspectLibrary>
        <groupId>com.jcabi</groupId>
        <artifactId>jcabi-aspects</artifactId>
      </aspectLibrary>
    </aspectLibraries>
  </configuration>
  <executions>
    <execution>
      <id>weave-classes</id>
      <phase>process-classes</phase>
      <goals>
        <goal>compile</goal>
      </goals>
    </execution>
  </executions>
</plugin>
+--

  Also, read more about custom integration of
  {{{./jsr-303.html}JSR-303 annotations}} and AOP.

* Cutting Edge Version

  If you want to use current version of the product, you can do it with
  this configuration in your <<<pom.xml>>>:

+--
<repositories>
  <repository>
    <id>oss.sonatype.org</id>
    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
  </repository>
</repositories>
<dependencies>
  <dependency>
    <groupId>com.jcabi</groupId>
    <artifactId>jcabi-aspects</artifactId>
    <version>1.0-SNAPSHOT</version>
  </dependency>
</dependencies>
+--
