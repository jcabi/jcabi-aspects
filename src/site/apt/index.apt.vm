 ------
 Useful Java AOP Aspects
 ------
 Yegor Bugayenko
 ------
 2012-05-27
 ------

~~
~~ Copyright (c) 2012-2024, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, the list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com, nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES, LOSS OF USE, DATA, PROFITS, OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Useful Java AOP Aspects:

  Useful Java AOP Aspects is a collection of useful AOP aspects and Java annotations which
  allow you to modify the behavior of your Java application without
  writing lots of duplicate code.

  For example, you may want to retry HTTP
  resource downloading in case of a failure. You can implement a full
  <<<do/while>>> cycle yourself or you can annotate the method with
  {{{./apidocs-${project.version}/com/jcabi/aspects/RetryOnFailure.html}<<<@RetryOnFailure>>>}}
  and let one of our AOP aspects do the work for you:

+--
public class MyResource {
  @RetryOnFailure
  public String load(URL url) {
    return url.openConnection().getContent();
  }
}
+--

  <<<jcabi-aspects>>> works together only with {{{http://www.eclipse.org/aspectj/}AspectJ}},
  an {{{http://en.wikipedia.org/wiki/Aspect-oriented_programming}aspect oriented programming (AOP)}}
  framework. At the moment, we offer the following aspects
  (we extend this list every few months):

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Async.html}<<<@Async>>>}} —
     Executes methods asynchronously.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Cacheable.html}<<<@Cacheable>>>}} —
     Checks method results in {{{./annotation-cacheable.html}memory}}.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Immutable.html}<<<@Immutable>>>}} —
     Guarantees class true {{{./annotation-immutable.html}immutability}} in runtime.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/LogExceptions.html}<<<@LogExceptions>>>}} —
     logs {{{./annotation-logexceptions.html}exceptions}}
     via {{{http://log.jcabi.com/apidocs-0.12.2/com/jcabi/log/Logger.html}<<<Logger>>>}}.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Quietly.html}<<<@Quietly>>>}} —
     Swallows all exceptions {{{./annotation-quietly.html}quietly}}.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Loggable.html}<<<@Loggable>>>}} —
     Logs method {{{./annotation-loggable.html}calls}} via
     {{{http://log.jcabi.com/apidocs-0.12.2/com/jcabi/log/Logger.html}<<<Logger>>>}}.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Parallel.html}<<<@Parallel>>>}} —
     Executes method in {{{./annotation-parallel.html}multiple threads}}.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/RetryOnFailure.html}<<<@RetryOnFailure>>>}} —
     Retries the method execution {{{./annotation-retryonfailure.html}a few times}}.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/ScheduleWithFixedDelay.html}<<<@ScheduleWithFixedDelay>>>}} —
     Schedules class execution in {{{./annotation-schedulewithfixeddelay.html}multiple threads}}.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/Timeable.html}<<<@Timeable>>>}} —
     Interrupts a method if it exceeds {{{./annotation-timeable.html}an allowed time frame}}.

   * {{{./apidocs-${project.version}/com/jcabi/aspects/UnitedThrow.html}<<<@UnitedThrow>>>}} —
     Encapsulates all exceptions into {{{./annotation-unitedthrow.html}allowed one}}.

  After you add these annotations to your code, you should
  configure your build system to {{{./example-weaving.html}"weave" your binaries after compilation}}.
  (This is mandatory! Without this step, annotations will have absolutely no effect)!

  If you have any questions, please submit an issue to
  {{{https://github.com/jcabi/jcabi-aspects/issues/new}Github}}.

  Also, check these blog articles, they are explaining how
  the library works, in details:

   * {{{http://www.yegor256.com/2014/06/01/aop-aspectj-java-method-logging.html}Java Method Logging with AOP and Annotations}}

   * {{{http://www.yegor256.com/2014/08/03/cacheable-java-annotation.html}Cache Java Method Results}}

   * {{{http://www.yegor256.com/2014/06/20/limit-method-execution-time.html}Limit Java Method Execution Time}}

* Cutting Edge Version

  If you want to use a current version of the product, you can do it with
  this configuration in your <<<pom.xml>>>:

+--
<repositories>
  <repository>
    <id>oss.sonatype.org</id>
    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
  </repository>
</repositories>
<dependencies>
  <dependency>
    <groupId>com.jcabi</groupId>
    <artifactId>jcabi-aspects</artifactId>
    <version>${project.version}</version>
  </dependency>
</dependencies>
+--
