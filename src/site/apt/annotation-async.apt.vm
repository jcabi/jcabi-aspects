 ------
 Asynchronous Execution of Java Methods
 ------
 Carlos Miranda
 ------
 2014-07-04
 ------

~~
~~ Copyright (c) 2012-2024, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, the list of conditions, and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, the list of conditions, and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com, nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, PROFITS, OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE),
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Asynchronous Execution of Methods

  Methods annotated with
  {{{./apidocs-${project.version}/com/jcabi/aspects/Async.html}<<<@Async>>>}}
  will return immediately to its caller while its operation executes
  asynchronously:

+--
public class Foo {
  @Async
  public void save() {
    // perform some operation here
  }
}
+--

  The <<<save()>>> method will immediately return control to its
  caller when invoked, without having to wait for the operation to complete.
  Note that the <<<save()>>> operation will execute in a separate
  thread, so you must ensure thread safety for any shared data being
  manipulated within <<<save()>>>.

  An asynchronous method can also pass a result to its caller by returning a
  {{{http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html}<<<Future>>>}}
  through the returned value of <<<Future.get()>>>.

+--
public class Foo {
  @Async
  public Future<Integer> calculate() {
    // perform some operation here
    // return an instance of Future interface
  }
}
+--

  Methods annotated with <<<@Async>>> must strictly have a <<<void>>> or
  {{{http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html}<<<Future>>>}}
  return type. Otherwise, an exception will be thrown at runtime when the method
  is invoked. If you wish to check for non-compliant methods at compile time,
  you may incorporate the annotation processor
  {{{./apidocs-${project.version}/com/jcabi/aspects/apt/AsyncReturnTypeProcessor.html}<<<AsyncReturnTypeProcessor>>>}}
  during your build. Example usage with <<<maven-processor-plugin>>>:

+--
<plugin>
  <groupId>org.bsc.maven</groupId>
  <artifactId>maven-processor-plugin</artifactId>
  <executions>
    <execution>
      <id>process</id>
      <goals>
        <goal>process</goal>
      </goals>
      <phase>generate-sources</phase>
      <configuration>
        <processors>
          <processor>com.jcabi.aspects.apt.AsyncReturnTypeProcessor</processor>
        </processors>
      </configuration>
    </execution>
  </executions>
</plugin>
+--

  The mechanism is implemented with AOP/AspectJ. Read
  {{{./example-weaving.html}how to integrate it into your <<<pom.xml>>>}}.
